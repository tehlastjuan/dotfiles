
# basic apps
#
# terminal emulator
set $term /usr/share/sway/scripts/foot.sh
set $term_cwd $term -D "$(swaycwd 2>/dev/null || echo $HOME)"
set $term_float footclient -a floating_shell
set $term_float_portrait footclient -a floating_shell_portrait

# Notification daemon configuration
set $notifications /usr/share/sway/scripts/mako.sh 

# application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
#set $menu rofi -show combi -combi-modi "drun,run" -terminal $term -ssh-command "{terminal} {ssh-client} {host} [-p {port}]" -run-shell-command "{terminal} {cmd}" -show-icons -font "$gui-font" -lines 10 -width 35 -theme-str $rofi_theme
# set $menu dmenu_path | dmenu | xargs swaymsg exec --
# set $menu $term_float sway-launcher-desktop
# set $menu exec $term -a launcher -e env TERMINAL=foot sway-launcher-desktop
set $menu exec $term -a launcher sway-launcher-desktop

# launcher theme
#set $menu_theme "{client.focused #e06c75 #e06c75 #1e222a #56b6c2 #353b45}"

# rofi theme
#set $rofi_theme "* {lightbg: $background-color; background: $background-color; lightfg: $accent-color; foreground: $text-color;}"

# onscreen bar
set $onscreen_bar bash /usr/share/sway/scripts/wob.sh "$accent-colorFF" "$background-colorFF"

# bluetooth menu
#set $rofi_bluetooth /usr/share/sway/scripts/rofi-bluetooth.sh $rofi_theme
set $bluetooth-tui $term_float -a bluetuth bluetuith

# pulseaudio command
set $pulseaudio $term_float pulsemixer

# brightness control
set $brightness_step bash -c 'echo $(( $(light -Mr) / 100 * 5 < 1 ? 1 : $(( $(light -Mr) / 100 * 5 )) ))'
set $brightness_up light -r -A $($brightness_step) && $onscreen_bar $(light -G | cut -d'.' -f1)
set $brightness_down light -r -U $($brightness_step) && $onscreen_bar $(light -G | cut -d'.' -f1)

# audio control
set $sink_volume pactl get-sink-volume @DEFAULT_SINK@ | grep '^Volume:' | cut -d / -f 2 | tr -d ' ' | sed 's/%//'
set $source_volume pactl get-source-volume @DEFAULT_SOURCE@ | grep '^Volume:' | cut -d / -f 2 | tr -d ' ' | sed 's/%//'
set $volume_down $onscreen_bar $(pactl set-sink-volume @DEFAULT_SINK@ -5% && $sink_volume)
set $volume_up $onscreen_bar $(pactl set-sink-volume @DEFAULT_SINK@ +5% && $sink_volume)
set $volume_mute $onscreen_bar $(pactl set-sink-mute @DEFAULT_SINK@ toggle && pactl get-sink-mute @DEFAULT_SINK@ | sed -En "/no/ s/.*/$($sink_volume)/p; /yes/ s/.*/0/p")
set $mic_mute $onscreen_bar $(pactl set-source-mute @DEFAULT_SOURCE@ toggle && pactl get-source-mute @DEFAULT_SOURCE@ | sed -En "/no/ s/.*/$($source_volume)/p; /yes/ s/.*/0/p")

# clipboard history
set $clipboard cliphist list | rofi -dmenu -font "$gui-font" -p "Select item to copy" -lines 10 -width 35 -theme-str $rofi_theme | cliphist decode | wl-copy
set $clipboard-del cliphist list | rofi -dmenu -font "$gui-font" -p "Select item to delete" -lines 10 -width 35 -theme-str $rofi_theme | cliphist delete

# screenshot 
set $grimshot /usr/share/sway/scripts/grimshot
set $image_upload /usr/share/sway/scripts/upload-image.sh
set $screenshot_screen_clipboard $grimshot --notify copy output
set $screenshot_screen_file $grimshot --notify save output
set $screenshot_screen_upload $screenshot_screen_file | xargs $image_upload
set $screenshot_selection_clipboard $grimshot --notify copy window
set $screenshot_selection_file $grimshot --notify save window
set $screenshot_selection_upload $screenshot_selection_file | xargs $image_upload

### extra apps

# calendar application
set $calendar $term_float khal interactive

# zeit tracking
set $zeit_list zeit list --only-projects-and-tasks --append-project-id-to-task | \
    rofi -dmenu -font "$gui-font" -p "Select task to track" -lines 10 -width 35 -theme-str $rofi_theme | \
    /usr/share/sway/scripts/zeit.sh track && \
    pkill -RTMIN+10 waybar

# yewtube app
set $yewtube $term_float yt

# help toggle
set $help /usr/share/sway/scripts/help.sh --toggle
